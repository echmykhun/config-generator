/**
 * Created by yevhen_chmykhun on 13.10.15.
 */

var constants = require('./../constants.json');
var util = require('./../util');

module.exports = function (gen, next) {

  var generator = gen, nextPrompt = next;

  var relationsPrompt = function () {
    var relationsPromptPromiseFunc = function (resolve, reject) {
      var relationsPromptOptions = {
        type: 'list',
        name: 'type',
        message: 'Enter relationship type(none to proceed)',
        choices: generator.relTypes,
        default: generator.relTypes[0]
      };
      var relationsPromptCallback = function (answers) {
        var rel = answers.type;
        if (rel == "none") {
          generator.configObject['relationships'] = generator.relationships;
          util.saveConfig(generator.configObject, generator.configFileName);
        }
        resolve(rel);
      };
      generator.prompt(relationsPromptOptions, relationsPromptCallback);

    };
    return new Promise(relationsPromptPromiseFunc).then(afterRelationsPrompt);
  };


  var afterRelationsPrompt = function (rel) {
    if (rel != "none") {
      var params = {rel: rel};
      return ownerClassPropPrompt(params);
    } else {
      return nextPrompt ? nextPrompt() : false;
    }
  };


  var ownerClassPropPrompt = function (params) {
    var ownerClassPropPromiseFunc = function (resolve, reject) {
      var ownerClassPropPromptOptions = {
        type: 'list',
        name: 'ownerClassName',
        message: 'Enter owner class name',
        choices: generator.pureModelNames,
        default: generator.pureModelNames[0]
      };
      var ownerClassPropPromptCallback = function (answers) {
        params.relationship = {};
        params.relationship.ownerClassName = answers.ownerClassName;
        resolve(params)
      };
      generator.prompt(ownerClassPropPromptOptions, ownerClassPropPromptCallback);

    };
    return new Promise(ownerClassPropPromiseFunc).then(ownedClassPropPrompt);
  };
  var ownedClassPropPrompt = function (params) {
    var ownedClassPropPromiseFunc = function (resolve, reject) {
      var ownedClassPropPromptOptions = {
        type: 'list',
        name: 'ownedClassName',
        message: 'Enter owned class name',
        choices: generator.pureModelNames,
        default: generator.pureModelNames[0]
      };
      var ownedClassPropPromptCallback = function (answers) {
        params.relationship.ownedClassName = answers.ownedClassName;
        util.addModelOrientedRelation(params, generator.modelOrientedRelations);
        resolve(params)
      };
      generator.prompt(ownedClassPropPromptOptions, ownedClassPropPromptCallback);

    };
    return new Promise(ownedClassPropPromiseFunc).then(deleteOwnerConstraintsPrompt);
  };
  var deleteOwnerConstraintsPrompt = function (params) {
    var deleteOwnerConstraintsPromiseFunc = function (resolve, reject) {
      var deleteOwnerConstraintsPromptOptions = {
        type: 'list',
        name: 'onDeleteOwnerConstraint',
        message: 'delete owner constraint',
        choices: constants.onDeleteOwnerConstraints,
        default: constants.onDeleteOwnerConstraints[0]
      };
      var deleteOwnerConstraintsPromptCallback = function (answers) {
        params.relationship.onDeleteOwnerConstraint = answers.onDeleteOwnerConstraint;
        resolve(params);
      };

      generator.prompt(deleteOwnerConstraintsPromptOptions, deleteOwnerConstraintsPromptCallback);
    };
    return new Promise(deleteOwnerConstraintsPromiseFunc).then(canCreateNestedModelPrompt);
  };

  var canCreateNestedModelPrompt = function (params) {
    var canCreateNestedModelPromisFunc = function (resolve, reject) {
      var canCreateNestedModelPromptOptoins = {
        type: 'confirm',
        name: 'canCreateNestedModel',
        message: 'Can this relation create nested models?',
        default: true
      };
      var canCreateNestedModelPromptCallback = function(answers){
        params.relationship.canCreateNestedModel = answers.canCreateNestedModel;
        generator.relationships[params.rel].push(params.relationship);
        resolve(false);
      };
      generator.prompt(canCreateNestedModelPromptOptoins, canCreateNestedModelPromptCallback);
    };
    return new Promise(canCreateNestedModelPromisFunc).then(relationsPrompt);
  };


  return relationsPrompt;
};