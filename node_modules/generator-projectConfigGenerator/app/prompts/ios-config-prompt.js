/**
 * Created by yevhen_chmykhun on 13.10.15.
 */
var constants = require('./../constants.json');
var util = require('./../util');

module.exports = function (gen, next) {

  var generator = gen, nextPrompt = next;

  var iosConfigPrompt = function () {
    var iosConfigPromiseFunc = function (resolve, reject) {
      var iosConfigPromptOptions = {
        type: 'input',
        name: 'name',
        message: 'Enter ios app name',
        default: generator.iosConfig.appName || 'GeneratedProject'
      };
      var iosConfigPromptCallback = function (answer) {
        generator.iosConfig.appName = answer.name;
        resolve();
      };
      generator.prompt(iosConfigPromptOptions, iosConfigPromptCallback);
    };
    return new Promise(iosConfigPromiseFunc).then(iosConfigPrefixPrompt);
  };
  var iosConfigPrefixPrompt = function () {
    var iosConfigPrefixPromiseFunc = function (resolve, reject) {
      var iosConfigPrefixPromptOptions = {
        type: 'input',
        name: 'prefix',
        message: 'Enter ios app prefix',
        default: generator.iosConfig.appPrefix || 'GTP'
      };
      var iosConfigPrefixPromptCallback = function (answer) {
        generator.iosConfig.appPrefix = answer.prefix.toUpperCase();
        generator.configObject["iosConfig"] = generator.iosConfig;
        util.saveConfig(generator.configObject, generator.configFileName);
        resolve();
      };
      generator.prompt(iosConfigPrefixPromptOptions, iosConfigPrefixPromptCallback);
    };
    return new Promise(iosConfigPrefixPromiseFunc).then(afterIosConfigPromiseFunc);
  };
  var afterIosConfigPromiseFunc = function () {
    return nextPrompt ? nextPrompt() : false
  };

  return iosConfigPrompt;
};