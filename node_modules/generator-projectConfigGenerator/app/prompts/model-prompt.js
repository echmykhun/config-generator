/**
 * Created by yevhen_chmykhun on 13.10.15.
 */
var constants = require('./../constants.json');
var util = require('./../util');

module.exports = function (gen, next) {

  var generator = gen, nextPrompt = next;

  var modelPrompt = function () {
    var modelPromptPromiseFunc = function (resolve, reject) {
      var modelPromptOptions = {
        type: 'input',
        name: 'model',
        message: 'Enter model name' + (generator.minContent ? "(empty field to proceed)" : ""),
        default: ''
      };
      var modelPromptCallback = function (answers) {
        if (answers.model != '') {
          var modelName = answers.model.capitalizeFirstLetter().makeCamelCase();
          generator.modelNames.push(modelName);
          generator.pureModelNames.push(modelName);
          generator.log(modelName);
          generator.models[modelName] = {};
          resolve(modelName)
        } else {
          generator.configObject['models'] = generator.models;
          util.saveConfig(generator.configObject, generator.configFileName);
          resolve(false)
        }
      };
      generator.prompt(modelPromptOptions, modelPromptCallback);
    };
    return new Promise(modelPromptPromiseFunc).then(afterModelPrompt);
  };


  var afterModelPrompt = function (modelName) {
    if (modelName) {
      return tableNamePrompt(modelName);
    } else {
      if (!generator.minContent) {
        generator.log('There must be minimum one model and minimum on column to proceed');
        return modelPrompt();
      }
      return nextPrompt ? nextPrompt() : false;
    }
  };


  var tableNamePrompt = function (modelName) {
    var tableNamePromptPromiseFunc = function (resolve, reject) {
      var tableNamePromptOptions = {
        type: 'input',
        name: 'table',
        message: 'Enter table name',
        default: modelName.toPlural().toLowerCase()
      };
      var tableNamePromptCallback = function (answers) {
        var tableName = answers.table;
        generator.models[modelName].table = tableName;
        resolve(modelName);
      };
      generator.prompt(tableNamePromptOptions, tableNamePromptCallback);
    };
    return new Promise(tableNamePromptPromiseFunc).then(columnNamePrompt);
  };
  var columnNamePrompt = function (modelName) {
    if (typeof modelName == 'object') modelName = modelName.modelName;
    var columnNamePromptPromiseFunc = function (resolve, reject) {
      var columnNamePromptOptions = {
        type: 'input',
        name: 'column',
        message: 'Enter column name(empty field to proceed)',
        default: ''
      };
      var columnNameCallback = function (answers) {
        if (!generator.models[modelName].columns) {
          generator.models[modelName].columns = {};
        }
        if (answers.column != '') {
          var columnName = answers.column;
          var tableName = generator.models[modelName].table;
          generator.tableColumnsToFake.push(tableName + "." + columnName);
          generator.models[modelName].columns[columnName] = {};
          generator.minContent = true;
          resolve({modelName: modelName, columnName: columnName})
        } else {
          resolve({modelName: modelName, columnName: false})
        }
      };
      generator.prompt(columnNamePromptOptions, columnNameCallback);
    };
    return new Promise(columnNamePromptPromiseFunc).then(afterColumnNamePrompt);
  };
  var afterColumnNamePrompt = function (params) {
    var launchStringTypePrompt = function (resolve) {
      var lengthPromptOptions = {
        type: 'input',
        name: 'fieldLength',
        message: 'Enter length',
        default: '255'
      };
      var lengthPromptCallback = function (answers) {
        generator.models[params.modelName].columns[params.columnName].length = parseInt(answers.fieldLength);
        resolve({modelName: params.modelName, columnName: params.columnName})
      };
      generator.prompt(lengthPromptOptions, lengthPromptCallback);
    };
    var launchIosTypeDatePrompt = function (resolve) {
      var iosTypeDatePromptOptions = {
        type: 'confirm',
        name: 'doIOSTypeDate',
        message: 'Set ios type as Date?',
        default: false
      };
      var iosTypeDatePromptCallback = function (answers) {
        generator.log(answers.doIOSTypeDate);
        if (answers.doIOSTypeDate) {
          generator.models[params.modelName].columns[params.columnName].iosType = "Date";
        }
        resolve({modelName: params.modelName, columnName: params.columnName})
      };
      generator.prompt(iosTypeDatePromptOptions, iosTypeDatePromptCallback);

    };
    var columnTypePromiseFunc = function (resolve, reject) {
      var columnTypePromptOptions = {
        type: 'list',
        name: 'type',
        message: 'Enter column type',
        choices: constants.columnTypes,
        default: constants.columnTypes[0]
      };

      var columnTypePromptCallback = function (answers) {
        var columnType = answers.type;
        generator.models[params.modelName].columns[params.columnName].type = columnType;
        switch (columnType) {
          case "STRING":
            launchStringTypePrompt(resolve);
            break;
          //case "INTEGER":
          //  launchIosTypeDatePrompt(resolve);
          //  break;
          case "DATE":
            //generator.models[params.modelName].columns[params.columnName].type = "INTEGER";
            generator.models[params.modelName].columns[params.columnName].iosType = "Date";
            resolve(params);
            break;
          default :
            resolve(params);
        }
      };
      generator.prompt(columnTypePromptOptions, columnTypePromptCallback);
    };
    var indexesPromiseFunc = function (resolve, reject) {
      function indexSwitch(indexType, index) {
        switch (indexType) {
          case "unique":
            index.unique = true;
            var fields = Object.keys(generator.models[params.modelName].columns);
            fields.push("none");
            var fieldNamesForIndex = [];
            var indexesFieldsPromptOptions = {
              type: 'list',
              name: 'fieldName',
              message: 'Add fields for unique index',
              choices: fields,
              default: fields[0]
            };
            var indexesFieldsPromptCallback = function (answer) {
              var fieldName = answer.fieldName;
              if (fieldName != "none") {
                fieldNamesForIndex.push(fieldName);
                generator.prompt(indexesFieldsPromptOptions, indexesFieldsPromptCallback);
              } else {
                index.fields = fieldNamesForIndex;
                generator.models[params.modelName].indexes.push(index);
                generator.prompt(indexesPromptOptions, indexesPromptCallback);
              }

            };
            generator.prompt(indexesFieldsPromptOptions, indexesFieldsPromptCallback);
            break;
          default :
            generator.log('How did i get here????');
            resolve(false);
        }
      }

      var indexesPromptOptions = {
        type: 'list',
        name: 'indexType',
        message: 'Add index',
        choices: constants.indexesType,
        default: constants.indexesType[0]
      };
      var indexesPromptCallback = function (answers) {
        var indexType = answers.indexType;
        if (indexType != "none") {
          if (!generator.models[params.modelName].indexes) generator.models[params.modelName].indexes = [];
          var index = {};
          indexSwitch(indexType, index);
        }
        else {
          resolve(false);
        }

      };
      generator.prompt(indexesPromptOptions, indexesPromptCallback);

    };
    if (!params.columnName) return new Promise(indexesPromiseFunc).then(modelPrompt);
    return new Promise(columnTypePromiseFunc).then(columnAllowNullPrompt);
  };

  var columnAllowNullPrompt = function (params) {
    var columnAllowNullPromiseFunc = function (resolve, reject) {
      var columnAllowNullPromptOptions = {
        type: 'confirm',
        name: 'doNotAllowNull',
        message: 'Add NOT NULL constraint for this column?',
        default: false
      };
      var columnAllowNullPromptCallback = function (answers) {
        var modelName = params.modelName;
        var columnName = params.columnName;
        if (answers.doNotAllowNull)
          generator.models[modelName].columns[columnName].allowNull = !answers.doNotAllowNull;
        resolve(params);

      };
      generator.prompt(columnAllowNullPromptOptions, columnAllowNullPromptCallback);
    };
    return new Promise(columnAllowNullPromiseFunc).then(columnDoValidatePrompt);
  };

  var columnDoValidatePrompt = function (params) {
    var columnDoValidatePromiseFunc = function (resolve, reject) {
      var modelName = params.modelName;
      var columnName = params.columnName;
      var validationTypes = constants.constantsForTypes[generator.models[modelName].columns[columnName].type].fieldValidateTypes;
      if (validationTypes.length <= 0) {
        params.doValidate = false;
        resolve(params);
      } else {
        var columnDoValidatePromptOptions = {
          type: 'confirm',
          name: 'doValidate',
          message: 'Is there any validation rules?',
          default: false
        };
        var columnDoValidatePromptCallback = function (answers) {
          if (answers.doValidate) {
            generator.models[params.modelName].columns[params.columnName].validate = {};

          }
          params.doValidate = answers.doValidate;
          resolve(params);
        };
        generator.prompt(columnDoValidatePromptOptions, columnDoValidatePromptCallback);
      }
    };
    return new Promise(columnDoValidatePromiseFunc).then(columnValidationTypesPrompt);
  };
  var columnValidationTypesPrompt = function (params) {

    var columnIsUniquePromiseFunc = function (resolve, reject) {
      var columnIsUniquePromptOptions = {
        type: 'confirm',
        name: 'isUnique',
        message: 'Is this field unique?',
        default: false
      };
      var columnIsUniquePromptCallback = function (answers) {
        generator.models[params.modelName].columns[params.columnName].unique = answers.isUnique;
        resolve(params.modelName)
      };
      generator.prompt(columnIsUniquePromptOptions, columnIsUniquePromptCallback);
    };
    var columnIsUniqueOrValidationTypesPrompt = function () {
      if (params.loop)
        return new Promise(columnValidationTypesPromiseFunc).then(columnIsUniqueOrValidationTypesPrompt);
      return new Promise(columnIsUniquePromiseFunc).then(columnNamePrompt)
    };


    var columnValidationTypesPromiseFunc = function (resolve, reject) {
      var modelName = params.modelName;
      var columnName = params.columnName;

      function launchLengthValidationSetupPrompt() {
        var validationLenTypeOptions = {
          type: 'input',
          name: 'boundaryValues',
          message: 'Enter boundary values, separated be comma(Ex: 8,22)',
          default: '0,100'
        };
        var validationLenTypeCallback = function (answer) {
          var boundaryValues = answer.boundaryValues.split(',');
          boundaryValues.forEach(function (element, index) {
            boundaryValues[index] = parseInt(element);
          });
          generator.models[modelName].columns[columnName].validate.len = boundaryValues;
          resolve(params);
        };
        generator.prompt(validationLenTypeOptions, validationLenTypeCallback);
      }

      var columnValidationTypesPromptOptions = {
        type: 'list',
        name: 'validationType',
        message: 'Enter validation type(none to proceed)',
        choices: constants.constantsForTypes[generator.models[modelName].columns[columnName].type].fieldValidateTypes.concat("none"),
        default: constants.constantsForTypes[generator.models[modelName].columns[columnName].type].fieldValidateTypes[0]
      };
      var columnValidationTypesPromptCallback = function (answers) {

        switch (answers.validationType) {
          case 'none' :
            params.loop = false;
            resolve(params);
            break;
          case 'len':
            params.loop = true;
            generator.models[modelName].columns[columnName].validate.len = [];
            launchLengthValidationSetupPrompt();
            break;
          default :
            params.loop = true;
            generator.models[modelName].columns[columnName].validate[answers.validationType] = true;
            resolve(params);
        }


      };
      generator.prompt(columnValidationTypesPromptOptions, columnValidationTypesPromptCallback);
    };

    if (!params.doValidate) {
      return new Promise(columnIsUniquePromiseFunc).then(columnNamePrompt);
    } else {
      return new Promise(columnValidationTypesPromiseFunc).then(columnIsUniqueOrValidationTypesPrompt);
    }
  };


  return modelPrompt;
};
