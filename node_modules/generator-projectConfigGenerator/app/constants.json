{
  "columnTypes": [
    "STRING",
    "TEXT",
    "INTEGER",
    "BIGINT",
    "FLOAT",
    "REAL",
    "DOUBLE",
    "DECIMAL",
    "TINYINT",
    "DATE"
  ],
  "intTypes": [
    "INTEGER",
    "BIGINT",
    "TINYINT"
  ],
  "columnTempTypes": {
    "DATE": "INTEGER"
  },
  "indexesType": [
    "none",
    "unique"
  ],
  "indexesRestrictions": {
    "unique": {
      "TEXT": {},
      "STRING": {
        "name": "length",
        "value": 192,
        "rule": ">="
      }
    }
  },
  "relationshipsTypes": [
    "hasOne",
    "hasMany",
    "belongsToMany"
  ],
  "relationshipsFields":{
    "hasOne":[
      {
        "message":"Enter alias",
        "name":"as"
      },
      {
        "message":"Enter owner alias",
        "name":"ownerAlias"
      },
      {
        "message":"Enter foreignKey",
        "name":"foreignKey"
      }
    ],
    "hasMany":[
      {
        "message":"Enter alias",
        "name":"as"
      },
      {
        "message":"Enter owner alias",
        "name":"ownerAlias"
      },
      {
        "message":"Enter foreign key",
        "name":"foreignKey"
      }
    ],
    "belongsToMany":[
      {
        "message":"Enter alias",
        "name":"as"
      },
      {
        "message":"Enter owner alias",
        "name":"ownerAlias"
      },
      {
        "message":"Enter owner foreign key",
        "name":"ownerForeignKey"
      },
      {
        "message":"Enter owned foreign key",
        "name":"ownedForeignKey"
      },
      {
        "message":"Enter through table name",
        "name":"through"
      }
    ]
  },
  "onDeleteOwnerConstraints": [
    "set null",
    "cascade"
  ],
  "__comment": "It's much more simple to do methods hint this way",
  "modelsCrudMethodsKeys": [
    "none",
    "GET(Get model)",
    "POST(Create model)",
    "PUT(Update model)",
    "DELETE(Delete model)"
  ],
  "modelsCrudMethods": {
    "GET(Get model)": "GET",
    "POST(Create model)": "POST",
    "PUT(Update model)": "PUT",
    "DELETE(Delete model)": "DELETE"
  },
  "CRUDModelsTypes": [
    "object",
    "array"
  ],
  "allowedFakerTypesSubstitutionRule": "\\((maxValue|length)\\)",
  "FakerTypesSubstitutionAliases":{
    "maxValue": "length"
  },
  "constantsForTypes": {
    "STRING": {
      "allowedFakerTypes": [
        "randomString(length)",
        "Faker.Name.findName()",
        "Faker.Name.firstName()",
        "Faker.Name.lastName()",
        "Faker.Name.firstNameFemale()",
        "Faker.Name.firstNameMale()",
        "Faker.Address.city()",
        "Faker.Address.streetName()",
        "Faker.Address.ukCounty()",
        "Faker.Address.ukCountry()",
        "Faker.Address.usState()",
        "Faker.Internet.email()",
        "Faker.Internet.userName()",
        "Faker.Internet.domainName()",
        "Faker.Internet.domainWord()",
        "Faker.Company.suffixes()",
        "Faker.Company.companyName()",
        "Faker.Company.companySuffix()",
        "Faker.Image.avatar()",
        "Faker.Image.imageUrl()",
        "Faker.random.city_prefix()",
        "Faker.random.city_suffix()",
        "Faker.random.street_suffix()",
        "Faker.random.avatar_uri()"
      ],
      "fieldValidateTypes": [
        "len",
        "isEmail",
        "notEmpty",
        "notNull",
        "isNumeric"
      ],
      "internalRestrictions": [
        "length"
      ]
    },
    "TEXT": {
      "allowedFakerTypes": [
        "randomString(length)",
        "Faker.Name.findName()",
        "Faker.Name.firstName()",
        "Faker.Name.lastName()",
        "Faker.Name.firstNameFemale()",
        "Faker.Name.firstNameMale()",
        "Faker.Address.city()",
        "Faker.Address.streetName()",
        "Faker.Address.streetAddress()",
        "Faker.Address.secondaryAddress()",
        "Faker.Address.ukCounty()",
        "Faker.Address.ukCountry()",
        "Faker.Address.usState()",
        "Faker.Internet.email()",
        "Faker.Internet.userName()",
        "Faker.Internet.domainName()",
        "Faker.Internet.domainWord()",
        "Faker.Company.suffixes()",
        "Faker.Company.companyName()",
        "Faker.Company.companySuffix()",
        "Faker.Company.catchPhrase()",
        "Faker.Image.avatar()",
        "Faker.Image.imageUrl()",
        "Faker.random.city_prefix()",
        "Faker.random.city_suffix()",
        "Faker.random.street_suffix()",
        "Faker.random.avatar_uri()",
        "Faker.Lorem.sentence()",
        "Faker.Lorem.sentences()",
        "Faker.Lorem.paragraph()",
        "Faker.Lorem.paragraphs()"
      ],
      "fieldValidateTypes": []
    },
    "INTEGER": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)"
      ],
      "fieldValidateTypes": [
        "isInt"
      ]
    },
    "DATE": {
      "allowedFakerTypes": [
        "randomTimestamp()"
      ],
      "fieldValidateTypes": []
    },
    "BIGINT": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)"
      ],
      "fieldValidateTypes": []
    },
    "FLOAT": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)",
        "Faker.Address.latitude()",
        "Faker.Address.longitude()"
      ],
      "fieldValidateTypes": []
    },
    "REAL": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)",
        "Faker.Address.latitude()",
        "Faker.Address.longitude()"
      ],
      "fieldValidateTypes": []
    },
    "DOUBLE": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)",
        "Faker.Address.latitude()",
        "Faker.Address.longitude()"
      ],
      "fieldValidateTypes": []
    },
    "DECIMAL": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)",
        "Faker.Address.latitude()",
        "Faker.Address.longitude()"
      ],
      "fieldValidateTypes": [],
      "internalRestrictions": [
        "maxValue"
      ]
    },
    "TINYINT": {
      "allowedFakerTypes": [
        "Faker.Helpers.randomNumber(2)"
      ],
      "fieldValidateTypes": []
    }
  },
  "allowedFakerTypesVorValidations": {
    "isEmail": {
      "FakerTypes": [
        "Faker.Internet.email()"
      ]
    },
    "isNumeric": {
      "FakerTypes": []
    },
    "isInt": {
      "FakerTypes": []
    },
    "notNull": {
      "FakerTypes": []
    },
    "notEmpty": {
      "FakerTypes": []
    },
    "len": {
      "FakerTypes": []
    }
  },
  "allowedFakerTypesForInternalRestrictions": {
    "isEmail": {
      "FakerTypes": [
        "Faker.Internet.email()"
      ]
    },
    "length": {
      "FakerTypes": [
        "Faker.Helpers.randomNumber(maxValue)",
        "randomString(length)"
      ]
    }
  },
  "ruleFunctionTemplate": "return substitution %rule% validation",
  "fakerTypesSubstitutionsToValidationNames": {
    "length": [
      {
        "name": "len",
        "index": 1,
        "rule": "<="
      },
      {
        "name": "len",
        "index": 0,
        "rule": ">="
      }
    ],
    "maxValue": [
      {
        "name": "max",
        "rule": "<="
      }
    ]
  },
  "fakerTypesSubstitutionsToInternalRestrictionNames": {
    "length": [
      {
        "name": "length",
        "rule": "<="
      }
    ],
    "maxValue": [
      {
        "name": "length",
        "index": 1,
        "rule": "<="
      },
      {
        "name": "length",
        "index": 0,
        "rule": ">="
      }
    ]
  },
  "CRUDRelationTypesHints": {
    "requestNestedModels": {
      "owned": {
        "hasOne": "object",
        "hasMany": "array"
      },
      "owner": {}
    },
    "responseNestedModels": {
      "owner": {
        "hasOne": "object",
        "hasMany": "object",
        "belongsToMany": "array"
      },
      "owned": {
        "hasOne": "object",
        "hasMany": "array",
        "belongsToMany": "array"
      }
    }
  },
  "defaultPromptChain": [
    "generalPrompt",
    "modelPrompt",
    "relationsPrompt",
    "modelsCRUDMethodsPrompt",
    "onlyServerFieldsPrompt",
    "tablesColumnsFakerTypePrompt",
    "updateModelsAllowedAttrsPrompt",
    "serverConfigPrompt",
    "iosConfigPrompt"
  ],
  "pluralEndings": {
    "sh": "shes",
    "ch": "ches",
    "ay": "ays",
    "ey": "eys",
    "iy": "iys",
    "oy": "oys",
    "uy": "uys",
    "fe": "ves",
    "s": "ses",
    "x": "xes",
    "y": "ies",
    "o": "oes",
    "f": "ves"
  }
}