{
  "columnTypes": [
    "STRING",
    "TEXT",
    "INTEGER",
    "BIGINT",
    "FLOAT",
    "REAL",
    "DOUBLE",
    "DECIMAL",
    "BOOLEAN",
    "TINYINT"
  ],
  "intTypes": [
    "INTEGER",
    "BIGINT",
    "TINYINT"
  ],
  "indexesType": [
    "none",
    "unique"
  ],
  "relationshipsTypes": [
    "hasOne",
    "hasMany",
    "belongsToMany"
  ],
  "onDeleteOwnerConstraints": [
    "no action",
    "cascade"
  ],
  "__comment": "It's much more simple to do methods hint this way",
  "modelsCrudMethodsKeys": [
    "none",
    "GET(Get model)",
    "POST(Create model)",
    "PUT(Update model)",
    "DELETE(Delete model)"
  ],
  "modelsCrudMethods": {
    "GET(Get model)": "GET",
    "POST(Create model)": "POST",
    "PUT(Update model)": "PUT",
    "DELETE(Delete model)": "DELETE"
  },
  "CRUDModelsTypes": [
    "object",
    "array"
  ],
  "allowedFakerTypesSubstitutionRule": "\\((maxValue|length)\\)",
  "constantsForTypes": {
    "STRING": {
      "allowedFakerTypes": [
        "randomString(length)",
        "Faker.Name.findName()",
        "Faker.Name.firstName()",
        "Faker.Name.lastName()",
        "Faker.Name.firstNameFemale()",
        "Faker.Name.firstNameMale()",
        "Faker.Address.city()",
        "Faker.Address.streetName()",
        "Faker.Address.ukCounty()",
        "Faker.Address.ukCountry()",
        "Faker.Address.usState()",
        "Faker.Internet.email()",
        "Faker.Internet.userName()",
        "Faker.Internet.domainName()",
        "Faker.Internet.domainWord()",
        "Faker.Company.suffixes()",
        "Faker.Company.companyName()",
        "Faker.Company.companySuffix()",
        "Faker.Image.avatar()",
        "Faker.Image.imageUrl()",
        "Faker.Lorem.words()",
        "Faker.random.city_prefix()",
        "Faker.random.city_suffix()",
        "Faker.random.street_suffix()",
        "Faker.random.avatar_uri()"
      ],
      "fieldValidateTypes": [
        "len"
      ]
    },
    "TEXT": {
      "allowedFakerTypes": [
        "randomString(length)",
        "Faker.Name.findName()",
        "Faker.Name.firstName()",
        "Faker.Name.lastName()",
        "Faker.Name.firstNameFemale()",
        "Faker.Name.firstNameMale()",
        "Faker.Address.city()",
        "Faker.Address.streetName()",
        "Faker.Address.streetAddress()",
        "Faker.Address.secondaryAddress()",
        "Faker.Address.ukCounty()",
        "Faker.Address.ukCountry()",
        "Faker.Address.usState()",
        "Faker.Internet.email()",
        "Faker.Internet.userName()",
        "Faker.Internet.domainName()",
        "Faker.Internet.domainWord()",
        "Faker.Company.suffixes()",
        "Faker.Company.companyName()",
        "Faker.Company.companySuffix()",
        "Faker.Company.catchPhrase()",
        "Faker.Image.avatar()",
        "Faker.Image.imageUrl()",
        "Faker.Lorem.words()",
        "Faker.random.city_prefix()",
        "Faker.random.city_suffix()",
        "Faker.random.street_suffix()",
        "Faker.random.avatar_uri()",
        "Faker.Lorem.sentence()",
        "Faker.Lorem.sentences()",
        "Faker.Lorem.paragraph()",
        "Faker.Lorem.paragraphs()"
      ],
      "fieldValidateTypes": [
        "len"
      ]
    },
    "INTEGER": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)"
      ],
      "fieldValidateTypes": [
        "isInt"
      ]
    },
    "BIGINT": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)"
      ],
      "fieldValidateTypes": [
        "isInt"
      ]
    },
    "FLOAT": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)",
        "Faker.Address.latitude()",
        "Faker.Address.longitude()"
      ],
      "fieldValidateTypes": [
        "isInt"
      ]
    },
    "REAL": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)",
        "Faker.Address.latitude()",
        "Faker.Address.longitude()"
      ],
      "fieldValidateTypes": [
        "isInt"
      ]
    },
    "DOUBLE": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)",
        "Faker.Address.latitude()",
        "Faker.Address.longitude()"
      ],
      "fieldValidateTypes": [
        "isInt"
      ]
    },
    "DECIMAL": {
      "allowedFakerTypes": [
        "randomTimestamp()",
        "Faker.Helpers.randomNumber(maxValue)",
        "Faker.Address.latitude()",
        "Faker.Address.longitude()"
      ],
      "fieldValidateTypes": [
        "isInt"
      ]
    },
    "BOOLEAN": {
      "allowedFakerTypes": [
        "Faker.Helpers.randomNumber(2)"
      ],
      "fieldValidateTypes": []
    },
    "TINYINT": {
      "allowedFakerTypes": [
        "Faker.Helpers.randomNumber(2)"
      ],
      "fieldValidateTypes": []
    }
  },
  "CRUDRelationTypesHints": {
    "requestNestedModels": {
      "owned": {
        "hasOne": "object",
        "hasMany": "array"
      },
      "owner": {}
    },
    "responseNestedModels": {
      "owner": {
        "hasOne": "object",
        "hasMany": "object",
        "belongsToMany": "array"
      },
      "owned": {
        "hasOne": "object",
        "hasMany": "array",
        "belongsToMany": "array"
      }
    }
  }
}