{
  "columnTypes": [
    "STRING",
    "TEXT",
    "INTEGER",
    "BIGINT",
    "FLOAT",
    "REAL",
    "DOUBLE",
    "DECIMAL",
    "BOOLEAN",
    "TINYINT"
  ],
  "intTypes":[
    "INTEGER",
    "BIGINT",
    "TINYINT"
  ],
  "indexesType":[
    "none",
    "unique"
  ],
  "relationshipsTypes": [
    "hasOne",
    "hasMany",
    "belongsToMany"
  ],
  "onDeleteOwnerConstraints": [
    "none",
    "cascade"
  ],
  "modelsCrudMethods": [
    "GET",
    "POST",
    "PUT",
    "DELETE"
  ],
  "CRUDModelsTypes": [
    "object",
    "array"
  ],
  "allowedFakerTypes": [
    "randomTimestamp()",
    "randomString(length)",
    "Faker.Helpers.randomNumber(length)",
    "Faker.Name.findName()",
    "Faker.Name.firstName()",
    "Faker.Name.lastName()",
    "Faker.Name.firstNameFemale()",
    "Faker.Name.firstNameMale()",
    "Faker.Address.zipCode()",
    "Faker.Address.city()",
    "Faker.Address.streetName()",
    "Faker.Address.streetAddress()",
    "Faker.Address.secondaryAddress()",
    "Faker.Address.brState()",
    "Faker.Address.ukCounty()",
    "Faker.Address.ukCountry()",
    "Faker.Address.usState()",
    "Faker.Address.latitude()",
    "Faker.Address.longitude()",
    "Faker.PhoneNumber.phoneNumber()",
    "Faker.Internet.email()",
    "Faker.Internet.userName()",
    "Faker.Internet.domainName()",
    "Faker.Internet.domainWord()",
    "Faker.Internet.ip()",
    "Faker.Company.suffixes()",
    "Faker.Company.companyName()",
    "Faker.Company.companySuffix()",
    "Faker.Company.catchPhrase()",
    "Faker.Company.bs()",
    "Faker.Image.avatar()",
    "Faker.Image.imageUrl()",
    "Faker.Lorem.words()",
    "Faker.Lorem.sentence()",
    "Faker.Lorem.sentences()",
    "Faker.Lorem.paragraph()",
    "Faker.Lorem.paragraphs()",
    "Faker.random.city_prefix()",
    "Faker.random.city_suffix()",
    "Faker.random.street_suffix()",
    "Faker.random.avatar_uri()"
  ],
  "allowedFakerTypesLength": [
    "randomString(length)",
    "Faker.Helpers.randomNumber(length)"
  ],
  "fieldValidateTypes": [
    "len",
    "isInt"
  ],

  "CRUDRelationTypesHints": {
    "requestNestedModels": {
      "owned": {
        "hasOne": "object",
        "hasMany": "array"
      },
      "owner": {}
    },
    "responseNestedModels": {
      "owner": {
        "hasOne": "object",
        "hasMany": "object",
        "belongsToMany": "array"
      },
      "owned": {
        "hasOne": "object",
        "hasMany": "object",
        "belongsToMany": "array"
      }
    }
  }

}