/**
 * Created by yevhen_chmykhun on 13.10.15.
 */
var constants = require('./../constants.json');
var util = require('./../util');

module.exports = function (gen, next) {

  var generator = gen, nextPrompt = next;

  var serverConfigPrompt = function () {
    var serverConfigPromiseFunc = function (resolve, reject) {
      var serverConfigPromptOptions = {
        type: 'input',
        name: 'host',
        message: 'Enter host',
        default: generator.serverConfig.host || 'localhost'
      };
      var serverConfigPromptCallback = function (answer) {
        generator.serverConfig.host = answer.host;
        resolve();
      };
      generator.prompt(serverConfigPromptOptions, serverConfigPromptCallback);
    };
    return new Promise(serverConfigPromiseFunc).then(serverConfigPortPrompt);
  };
  var serverConfigPortPrompt = function () {
    var serverConfigPortPromiseFunc = function (resolve, reject) {
      var serverConfigPortPromptOptions = {
        type: 'input',
        name: 'port',
        message: 'Enter port',
        default: generator.serverConfig.port || '8080'
      };
      var serverConfigPortPromptCallback = function (answer) {
        generator.serverConfig.port = answer.port;
        resolve();
      };
      generator.prompt(serverConfigPortPromptOptions, serverConfigPortPromptCallback);
    };
    return new Promise(serverConfigPortPromiseFunc).then(serverConfigProtocolPrompt);
  };
  var serverConfigProtocolPrompt = function () {
    var serverConfigProtocolPromiseFunc = function (resolve, reject) {
      var serverConfigProtocolPromptOptions = {
        type: 'list',
        name: 'protocol',
        message: 'Enter protocol',
        choices: ["http", "https"],
        default: generator.serverConfig.protocol || 'http'
      };
      var serverConfigProtocolPromptCallback = function (answer) {
        generator.serverConfig.protocol = answer.protocol;
        generator.configObject["serverConfig"] = generator.serverConfig;
        util.saveConfig(generator.configObject, generator.configFileName);
        resolve();
      };
      generator.prompt(serverConfigProtocolPromptOptions, serverConfigProtocolPromptCallback);
    };
    return new Promise(serverConfigProtocolPromiseFunc).then(afterServerConfigPrompt);
  };
  var afterServerConfigPrompt = function () {
    return nextPrompt ? nextPrompt() : false
  };

  return serverConfigPrompt;
};