/**
 * Created by yevhen_chmykhun on 13.10.15.
 */
var constants = require('./../constants.json');
var util = require('./../util');

module.exports = function (gen, next) {


  var generator = gen, nextPrompt = next;

  var generalPrompt = function () {
    var generalPromptPromiseFunc = function (resolve, reject) {
      var generalPromptOptions = {
        type: 'input',
        name: 'name',
        message: "Wellcome to config generator. \n Enter your app name and press Enter to start",
        default: generator.configObject.appName || "GeneratedProject",
        validate: util.validateName,
        filter: function(answer){
          return answer.capitalizeFirstLetter().makeCamelCase();
        },
      };
      var generalPromptCallback = function (answers) {
        generator.configObject.appName = answers.name;
        util.saveConfig(generator.configObject, generator.configFileName);
        resolve();
      };
      generator.prompt(generalPromptOptions, generalPromptCallback);
    };
    return new Promise(generalPromptPromiseFunc).then(companyNamePrompt);
  };
  var companyNamePrompt = function () {
    var companyNamePromiseFunc = function (resolve, reject) {

      var companyNamePromptOptions = {
        type: 'input',
        name: 'name',
        message: "Enter your company name",
        default: generator.configObject.companyName || "DefaultCompanyName",
        validate: util.validateName,
        filter: function(answer){
          return answer.capitalizeFirstLetter().makeCamelCase();
        },
      };
      var companyNamePromptCallback = function(answers){
        generator.configObject.companyName = answers.name;
        util.saveConfig(generator.configObject, generator.configFileName);
        resolve();
      };
      generator.prompt(companyNamePromptOptions, companyNamePromptCallback);

    };
    return new Promise(companyNamePromiseFunc).then(packageNamePrompt);
  }

  var packageNamePrompt = function () {
    var packageNamePromiseFunc = function (resolve, reject) {
      var packageDefaultName = "com." + generator.configObject.companyName.toLowerCase() + "." + generator.configObject.appName.toLowerCase();
      var packageNamePromptOptions = {
        type: 'input',
        name: 'name',
        message: "Enter your package name",
        default: generator.configObject.packageName || packageDefaultName,
        validate: util.validatePackageName
      };
      var packageNamePromptCallback = function(answers){
        generator.configObject.packageName = answers.name;
        util.saveConfig(generator.configObject, generator.configFileName);
        resolve();
      };
      generator.prompt(packageNamePromptOptions, packageNamePromptCallback);

    };
    return new Promise(packageNamePromiseFunc).then(DBNamePrompt);
  }

  var DBNamePrompt = function () {
    var DBNamePromiseFunc = function (resolve, reject) {
      var DBDefaultName =generator.configObject.appName;
      var DBNamePromptOptions = {
        type: 'input',
        name: 'name',
        message: "Enter your DB name",
        default: generator.configObject.DBName || DBDefaultName,
        validate: util.validateName
      };
      var DBNamePromptCallback = function(answers){
        generator.configObject.DBName = answers.name;
        util.saveConfig(generator.configObject, generator.configFileName);
        resolve();
      };
      generator.prompt(DBNamePromptOptions, DBNamePromptCallback);

    };
    return new Promise(DBNamePromiseFunc).then(afterGeneralPrompt);
  }

  var afterGeneralPrompt = function () {
    return nextPrompt ? nextPrompt() : false
  };

  return generalPrompt;
};
