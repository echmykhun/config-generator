/**
 * Created by yevhen_chmykhun on 29.09.15.
 */
var generators = require('yeoman-generator');
var fs = require('fs');
var constants = require('./constants.json');
var util = require('./util');
var promptChainGenerator = require('./prompt-chain-generator');


var generatorObject = {

  constructor: function () {
    generators.Base.apply(this, arguments);
    this.option('configFileName');
    this.option('edit');
    util.expandGenerator(this);
  },

  init: function () {

    var optionEdit = this.options.edit;
    var optionConfigFileName = this.options.configFileName || "";
    var configConfigFileName = this.config.get('configFileName') || "";

    if (optionConfigFileName.length > 0 && optionConfigFileName.indexOf(".json") < 0 && optionConfigFileName.indexOf(".JSON") < 0) {
      optionConfigFileName += ".json";
    }

    this.configFileName = optionConfigFileName || configConfigFileName || this.configFileName;
    if (!configConfigFileName || this.configFileName != configConfigFileName)
      this.config.set('configFileName', configFileName);


    this.config.save();

    if (fs.existsSync(this.destinationPath(this.configFileName)) && optionEdit) {

      this.configObject = require(this.destinationPath(this.configFileName));
      this.models = this.configObject.models || {};
      this.relationships = this.configObject.relationships || {};
      this.modelsCrudMethods = this.configObject.modelsCrudMethods || {};
      this.tablesColumnsFakerType = this.configObject.tablesColumnsFakerType || {};
      this.onlyServerFields = this.configObject.onlyServerFields || {};
      this.updateModelsAllowedAttrs = this.configObject.updateModelsAllowedAttrs || {};
      this.serverConfig = this.configObject.serverConfig || {};
      this.iosConfig = this.configObject.iosConfig || {};
      if (this.models) {
        this.minContent = true;
        this.pureModelNames = Object.keys(models);
        this.modelNames = Object.keys(models);
        this.modelNames.unshift("none");
      }

      if (Object.getOwnPropertyNames(this.relationships).length === 0) {
        for (var i = 0; i < constants.relationshipsTypes.length; i++) {

          this.relationships[constants.relationshipsTypes[i]] = [];
        }
      }

    }


  },

  prompting: function () {


    var chainGenerator = new promptChainGenerator(this);
    var chain = constants.defaultPromptChain;
    var promptChain = chainGenerator.generateChain(chain);
    promptChain.run();


  }


};

module.exports = generators.Base.extend(generatorObject);
