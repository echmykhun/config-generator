/**
 * Created by yevhen_chmykhun on 13.10.15.
 */

var constants = require('./../constants.json');
var util = require('./../util');

module.exports = function (gen, next) {

  var generator = gen, nextPrompt = next;

  var updateModelsAllowedAttrsPrompt = function () {
    var updateModelsAllowedAttrsPromiseFunc = function (resolve, reject) {
      var updateModelsAllowedAttrsPromptOptions = {
        type: 'list',
        name: 'model',
        message: 'Update models allowed fields \n Enter model name(none to proceed)',
        choices: generator.modelNames,
        default: generator.modelNames[0]
      };
      var updateModelsAllowedAttrsPromptCallback = function (answers) {
        var modelName = answers.model;
        if (modelName != "none") {
          generator.tablesColumnsFakerType[modelName] = {};
          var modelFields = Object.keys(generator.models[modelName].columns);
          resolve({modelName: modelName, modelFields: modelFields})
        } else {
          var allUpdatedModelsHaveUpdatedFields = true;
          var message = "";
          //checking if all models that have PUT method have updatable fields
          for (i = 0; i < generator.modelsCanBeUpdated.length; ++i) {
            allUpdatedModelsHaveUpdatedFields &= (generator.modelsHaveUpdateAllowedAttrs.indexOf(generator.modelsCanBeUpdated[i]) >= 0);
            if (generator.modelsHaveUpdateAllowedAttrs.indexOf(generator.modelsCanBeUpdated[i]) < 0) {
              message = "Model " + generator.modelsCanBeUpdated[i] + " must have fields allowed to update";
            }
          }
          if (allUpdatedModelsHaveUpdatedFields) {
            generator.configObject['updateModelsAllowedAttrs'] = generator.updateModelsAllowedAttrs;
            util.saveConfig(generator.configObject, generator.configFileName);
            resolve(false);
          } else {
            generator.log(message);
            resolve({allUpdatedModelsHaveUpdatedFields: true});
          }
        }
      };
      generator.prompt(updateModelsAllowedAttrsPromptOptions, updateModelsAllowedAttrsPromptCallback);
    };
    return new Promise(updateModelsAllowedAttrsPromiseFunc).then(afterUpdateModelsAllowedAttrsPrompt);
  };
  var afterUpdateModelsAllowedAttrsPrompt = function (params) {
    if (params) {
      if (params.allUpdatedModelsHaveUpdatedFields) {
        return updateModelsAllowedAttrsPrompt(params);
      } else {
        return updateModelsAllowedAttrsFieldsPrompt(params);
      }
    } else {
      return nextPrompt ? nextPrompt() : false
    }
  };
  var updateModelsAllowedAttrsFieldsPrompt = function (params) {
    var updateModelsAllowedAttrsFieldsPromiseFunc = function (resolve, reject) {
      var updateModelsAllowedAttrsFieldsPromptOptions = {
        type: 'list',
        name: 'field',
        message: 'Enter field name(none to proceed)',
        choices: ["none"].concat(params.modelFields).concat(["all"]),
        default: "all"
      };
      var updateModelsAllowedAttrsFieldsPromptCallback = function (answer) {
        var field = answer.field;
        var i = 0
        params.field = field;
        if (field != "none") {
          if (!generator.updateModelsAllowedAttrs[params.modelName]) generator.updateModelsAllowedAttrs[params.modelName] = [];
          //adding info, that model has updatable field(at least one)
          if (generator.modelsHaveUpdateAllowedAttrs.indexOf(params.modelName) < 0) generator.modelsHaveUpdateAllowedAttrs.push(params.modelName);
          if (field == "all") {
            for (i = 0; i < params.modelFields.length; ++i) {
              if (generator.updateModelsAllowedAttrs[params.modelName].indexOf(params.modelFields[i]) < 0)
                generator.updateModelsAllowedAttrs[params.modelName].push(params.modelFields[i]);
            }
          } else {
            if (generator.updateModelsAllowedAttrs[params.modelName].indexOf(field) < 0)
              generator.updateModelsAllowedAttrs[params.modelName].push(field);
          }
        }
        resolve(params);
      };
      generator.prompt(updateModelsAllowedAttrsFieldsPromptOptions, updateModelsAllowedAttrsFieldsPromptCallback);
    };
    return new Promise(updateModelsAllowedAttrsFieldsPromiseFunc).then(afterUpdateModelsAllowedAttrsFieldsPrompt);
  };
  var afterUpdateModelsAllowedAttrsFieldsPrompt = function (params) {
    if (params.field != "none") {
      return updateModelsAllowedAttrsFieldsPrompt(params);
    } else {
      return updateModelsAllowedAttrsPrompt();
    }
  };

  return updateModelsAllowedAttrsPrompt;
};