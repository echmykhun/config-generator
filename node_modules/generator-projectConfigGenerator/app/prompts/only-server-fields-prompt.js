/**
 * Created by yevhen_chmykhun on 13.10.15.
 */

var constants = require('./../constants.json');
var util = require('./../util');

module.exports = function (gen, next) {

  var generator = gen, nextPrompt = next;

  var onlyServerFieldsPrompt = function () {
    var onlyServerFieldsPromiseFunc = function (resolve, reject) {
      var onlyServerFieldsPromptOptions = {
        type: 'list',
        name: 'model',
        message: 'Only server fields \n Enter model name(none to proceed)',
        choices: generator.modelNames,
        default: generator.modelNames[0]
      };
      var onlyServerFieldsPromptCallback = function (answers) {
        var modelName = answers.model;
        if (modelName != "none") {
          generator.tablesColumnsFakerType[modelName] = {};
          var modelFields = Object.keys(generator.models[modelName].columns);
          modelFields.push("none");
          resolve({modelName: modelName, modelFields: modelFields})
        } else {
          generator.configObject['onlyServerFields'] = generator.onlyServerFields;
          util.saveConfig(generator.configObject, generator.configFileName);
          resolve(false);
        }
      };
      generator.prompt(onlyServerFieldsPromptOptions, onlyServerFieldsPromptCallback);
    };
    return new Promise(onlyServerFieldsPromiseFunc).then(afterOnlyServerFieldsPrompt);
  };

  var afterOnlyServerFieldsPrompt = function (params) {
    if (params) {
      return onlyServerFieldsModelFieldsPrompt(params);
    } else {
      return nextPrompt ? nextPrompt() : false;
    }
  };

  var onlyServerFieldsModelFieldsPrompt = function (params) {
    var onlyServerFieldsModelFieldsPromiseFunc = function (resolve, reject) {
      var onlyServerFieldsModelFieldsPromptOptions = {
        type: 'list',
        name: 'field',
        message: 'Enter field name(none to proceed)',
        choices: params.modelFields,
        default: params.modelFields[0]
      };
      var onlyServerFieldsModelFieldsPromptCallback = function (answer) {
        var field = answer.field;
        params.field = field;
        if (field != "none") {
          if (!generator.onlyServerFields[params.modelName]) generator.onlyServerFields[params.modelName] = [];
          generator.onlyServerFields[params.modelName].push(field);
        }
        resolve(params);
      };
      generator.prompt(onlyServerFieldsModelFieldsPromptOptions, onlyServerFieldsModelFieldsPromptCallback);
    };
    return new Promise(onlyServerFieldsModelFieldsPromiseFunc).then(afterOnlyServerFieldsModelFieldsPrompt);
  };
  var afterOnlyServerFieldsModelFieldsPrompt = function (params) {
    if (params.field != "none") {
      return onlyServerFieldsModelFieldsPrompt(params);
    } else {
      return onlyServerFieldsPrompt();
    }
  };

  return onlyServerFieldsPrompt;
};